---
title: "Development"
author: "Toni Price"
date: last-modified
date-format: "[Last updated:] DD MMMM, YYYY"
format: 
  html
vignette: >
  %\VignetteIndexEntry{Development}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

~~~{=comment}
```{r setup}
library(dimex)
```
~~~

## About this vignette

This vignette deals with how to use the `dimex` package as a developer. See also
the [introduction to dimex](dimex.html) and [configuration](config.html)
vignettes.

## Setup

For a development environment:

### devtools

1.  Ensure `devtools` is installed. <br>
    From the `R` console:

    ```
    > install.packages("devtools")
    ```

2.  Ensure required packages are installed.
    - TODO: Implement renv and add setup instructions

3.  See the [configuration](config.html) vignette for configuration information.

### Some useful dev commands

These commands should be executed from the `R` console.

(Note that when `devtools` is installed, the following commands are usually
bound to keyboard shortcuts in RStudio; these are shown in the comments where
applicable)

-  Load the development version of the package:

    ```
    # Ctrl/Cmd + Shift + L
    > devtools::load_all(".")
    ```

-  Run the automated test suite:

    ```
    # Ctrl/Cmd + Shift + T
    > devtools::test(".")
    ```

-  Create package documentation:

    ```
    # Ctrl/Cmd + Shift + D
    > devtools::document(roclets = c('rd', 'collate', 'namespace'))
    ```

-  Build the package vignettes:

    ```
    > devtools::build_vignettes()
    ```

-  Run a package check:

    ```
    # Ctrl/Cmd + Shift + E
    > devtools::check()
    ```
    
- Test the current file:

    If you are using RStudio, this can be most easily achieved by setting a
    keyboard shortcut.

    For example, in RStudio <br>
    - Go to Tools | Modify Keyboard Shortcuts... <br>
    - In the Filter... bar type 'test'
    - Locate the 'Run a test' Addin, select its Shortcut and type 'Ctrl + T' (or
      whatever your preferred key sequence is), then click Apply

    This shortcut will now run `devtools:::test_active_file()`.

## Development configuration

### Variables in `.Renviron`

- You can specify environment variables to control whether to run the
  'high-level' data tests (that is, the tests which check saved reference data
  against datasets produced by the running code).
  
  These are slow -- many of them take ~10 seconds to run -- so they are skipped
  by default. To run them you need to set system environment variables in the
  `.Renviron` file at the root of the package directory:

    ````
    DIMEX_RUN_ALL_HLDT=true  # Set to 'true' or 'false' (or do not specify)
    DIMEX_RUN_HLDT_1*=true   # Set to 'true' or 'false' (or do not specify)
    ````

    That is, either set `DIMEX_RUN_ALL_HLDT=true`, or for each test you wish to
    run, set the appropriate `DIMEX_RUN_HLDT_1*=true`, for example:
    
    ````
    DIMEX_RUN_HLDT_1A=true
    DIMEX_RUN_HLDT_1D=true
    ````

    Note that if any of these environment variables does not exist, or is set to
    anything other than 'true', the corresponding high level data tests will
    *not* run.

    In this way it is possible to run only the test relevant to what you are
    currently working on, whilst still running the rest of the test suite.

    Use `DIMEX_RUN_ALL_HLDT=true` to run all the high-level data tests,
    irrespective of any `DIMEX_RUN_HLDT_1*` values. In other words, if
    `DIMEX_RUN_ALL_HLDT=true` it will override the individual settings. This can
    be useful after making some changes and checking an individual test, to then
    easily verify that all the high-level data tests still pass.
